import:
  - graphs/random.yaml
  #- graphs/emotiv.yaml
  #- graphs/record.yaml

graphs:

  - id: Broker
    nodes:
    - id: broker
      module: timeflux.nodes.zmq
      class: Broker

  - id: UI
    nodes:
    - id: app
      module: timeflux_ui.nodes.ui
      class: UI
      params:
        routes:
          app: gui
        settings:
          app:
            # see README.md for available options
            training:
              blocks_per_session: 3
              instructions_per_block: 12
              duration: # all durations are milliseconds
                prep: 3000
                rest: 5000
                on: 3000
                off: 2000
              instructions:
                - Clench your LEFT fist
                - Clench your RIGHT fist
                - BLINK once
            grid:
              shape:
                ratio: "1:1"
    - id: sub
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: [ model, filtered ]
    - id: pub
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: events
    edges:
      - source: sub:filtered
        target: app:eeg
      - source: sub:model
        target: app:model
      - source: app:events
        target: pub
    rate: 10

  - id: Classification
    nodes:
    - id: sub
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: [ filtered, events ]
    - id: epoch
      module: timeflux.nodes.epoch
      class: Epoch
      params:
        event_trigger: instruction_begins
        before: 0
        after: 0.9
    - id: window
      module: timeflux.nodes.window
      class: Slide
      params:
        length: 0.8
        step: 0.1
        rate: 250
    - id: trim
      module: timeflux.nodes.epoch
      class: Trim
      params:
        samples: 200
    - id: classification
      module: timeflux.nodes.ml
      class: Pipeline
      params:
        mode: predict_proba
        meta_label: [ epoch, context, id ]
        event_start_accumulation: training_begins
        event_stop_accumulation: training_ends
        event_start_training: training_ends
        steps:
          - module: timeflux.estimators.transformers.shape
            class: Transpose
            args:
              axes: [ 0, 2, 1 ]
          - module: pyriemann.estimation
            class: ERPCovariances
            args:
              estimator: oas
          - module: pyriemann.classification
            class: MDM
    - id: predict
      module: nodes.predict
      class: Accumulate
      params:
        buffer_size: 10
        threshold: 2
    - id: pub
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: model
    # - id: display
    #   module: timeflux.nodes.debug
    #   class: Display
    edges:
      - source: sub:filtered
        target: epoch
      - source: sub:filtered
        target: window
      - source: sub:events
        target: epoch:events
      - source: sub:events
        target: classification:events
      - source: epoch:*
        target: trim
      - source: trim:*
        target: classification:training
      - source: window:*
        target: classification
      - source: classification:events
        target: predict:model
      - source: predict
        target: pub
    # - source: classification:events
    #   target: display
    rate: 10

  - id: Display
    nodes:
    - id: subscribe
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: [ filtered, events ]
    - id: debug
      module: timeflux.nodes.debug
      class: Display
    edges:
      - source: subscribe:events
        target: debug
    rate: 10

